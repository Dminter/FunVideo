package com.zncm.dminter.funvideo.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zncm.dminter.funvideo.data.Live;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LIVE".
*/
public class LiveDao extends AbstractDao<Live, Long> {

    public static final String TABLENAME = "LIVE";

    /**
     * Properties of entity Live.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Live_id = new Property(0, Long.class, "live_id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Url = new Property(2, String.class, "url", false, "URL");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property Ex1 = new Property(4, String.class, "ex1", false, "EX1");
        public final static Property Ex2 = new Property(5, String.class, "ex2", false, "EX2");
        public final static Property Ex3 = new Property(6, String.class, "ex3", false, "EX3");
        public final static Property Ex4 = new Property(7, String.class, "ex4", false, "EX4");
        public final static Property Ex5 = new Property(8, String.class, "ex5", false, "EX5");
        public final static Property Exi1 = new Property(9, int.class, "exi1", false, "EXI1");
        public final static Property Exi2 = new Property(10, int.class, "exi2", false, "EXI2");
        public final static Property Exi3 = new Property(11, int.class, "exi3", false, "EXI3");
        public final static Property Exi4 = new Property(12, int.class, "exi4", false, "EXI4");
        public final static Property Exi5 = new Property(13, int.class, "exi5", false, "EXI5");
    }


    public LiveDao(DaoConfig config) {
        super(config);
    }
    
    public LiveDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LIVE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: live_id
                "\"NAME\" TEXT," + // 1: name
                "\"URL\" TEXT," + // 2: url
                "\"TYPE\" INTEGER NOT NULL ," + // 3: type
                "\"EX1\" TEXT," + // 4: ex1
                "\"EX2\" TEXT," + // 5: ex2
                "\"EX3\" TEXT," + // 6: ex3
                "\"EX4\" TEXT," + // 7: ex4
                "\"EX5\" TEXT," + // 8: ex5
                "\"EXI1\" INTEGER NOT NULL ," + // 9: exi1
                "\"EXI2\" INTEGER NOT NULL ," + // 10: exi2
                "\"EXI3\" INTEGER NOT NULL ," + // 11: exi3
                "\"EXI4\" INTEGER NOT NULL ," + // 12: exi4
                "\"EXI5\" INTEGER NOT NULL );"); // 13: exi5
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LIVE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Live entity) {
        stmt.clearBindings();
 
        Long live_id = entity.getLive_id();
        if (live_id != null) {
            stmt.bindLong(1, live_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
        stmt.bindLong(4, entity.getType());
 
        String ex1 = entity.getEx1();
        if (ex1 != null) {
            stmt.bindString(5, ex1);
        }
 
        String ex2 = entity.getEx2();
        if (ex2 != null) {
            stmt.bindString(6, ex2);
        }
 
        String ex3 = entity.getEx3();
        if (ex3 != null) {
            stmt.bindString(7, ex3);
        }
 
        String ex4 = entity.getEx4();
        if (ex4 != null) {
            stmt.bindString(8, ex4);
        }
 
        String ex5 = entity.getEx5();
        if (ex5 != null) {
            stmt.bindString(9, ex5);
        }
        stmt.bindLong(10, entity.getExi1());
        stmt.bindLong(11, entity.getExi2());
        stmt.bindLong(12, entity.getExi3());
        stmt.bindLong(13, entity.getExi4());
        stmt.bindLong(14, entity.getExi5());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Live entity) {
        stmt.clearBindings();
 
        Long live_id = entity.getLive_id();
        if (live_id != null) {
            stmt.bindLong(1, live_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
        stmt.bindLong(4, entity.getType());
 
        String ex1 = entity.getEx1();
        if (ex1 != null) {
            stmt.bindString(5, ex1);
        }
 
        String ex2 = entity.getEx2();
        if (ex2 != null) {
            stmt.bindString(6, ex2);
        }
 
        String ex3 = entity.getEx3();
        if (ex3 != null) {
            stmt.bindString(7, ex3);
        }
 
        String ex4 = entity.getEx4();
        if (ex4 != null) {
            stmt.bindString(8, ex4);
        }
 
        String ex5 = entity.getEx5();
        if (ex5 != null) {
            stmt.bindString(9, ex5);
        }
        stmt.bindLong(10, entity.getExi1());
        stmt.bindLong(11, entity.getExi2());
        stmt.bindLong(12, entity.getExi3());
        stmt.bindLong(13, entity.getExi4());
        stmt.bindLong(14, entity.getExi5());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Live readEntity(Cursor cursor, int offset) {
        Live entity = new Live( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // live_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // url
            cursor.getInt(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ex1
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ex2
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ex3
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ex4
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ex5
            cursor.getInt(offset + 9), // exi1
            cursor.getInt(offset + 10), // exi2
            cursor.getInt(offset + 11), // exi3
            cursor.getInt(offset + 12), // exi4
            cursor.getInt(offset + 13) // exi5
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Live entity, int offset) {
        entity.setLive_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setEx1(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEx2(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEx3(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEx4(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEx5(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setExi1(cursor.getInt(offset + 9));
        entity.setExi2(cursor.getInt(offset + 10));
        entity.setExi3(cursor.getInt(offset + 11));
        entity.setExi4(cursor.getInt(offset + 12));
        entity.setExi5(cursor.getInt(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Live entity, long rowId) {
        entity.setLive_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Live entity) {
        if(entity != null) {
            return entity.getLive_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Live entity) {
        return entity.getLive_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
